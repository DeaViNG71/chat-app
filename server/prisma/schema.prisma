// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique @db.VarChar(255)
  password  String    @db.Text
  email     String    @unique @db.VarChar(255)
  name      String    @map("displayName") @db.VarChar(255)
  avatar    String?   @default("/assets/avatar_male.png")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(false)
  lastSeen  DateTime?

  member   Member?
  friends  User[]  @relation("friends")
  friendOf User[]  @relation("friends")

  friendRequestSent     FriendRequest[] @relation("FriendRequestSent")
  friendRequestReceived FriendRequest[] @relation("friendRequestReceived")

  channels Channel[] @relation("ChannelsOwned")

  conversationInitiator Conversation[]  @relation("ConversationInitiator")
  conversationReceiver  Conversation[]  @relation("ConversationReceiver")
  conversationMessages  DirectMessage[]

  @@index([username, email])
  @@map("users")
}

model FriendRequest {
  id String @id @default(uuid())

  sender   User   @relation("FriendRequestSent", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("friendRequestReceived", fields: [receiverId], references: [id])
  receiverId String

  @@index([senderId, receiverId])
  @@map("friend_requests")
}

model Channel {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation("ChannelsOwned", fields: [ownerId], references: [id])
  ownerId String

  members  Member[]         @relation("ChannelsMemberOf")
  messages ChannelMessage[]

  @@index([ownerId])
  @@map("channels")
}

model Member {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  channels        Channel[]        @relation("ChannelsMemberOf")
  channelMessages ChannelMessage[]

  @@index([userId])
  @@map("members")
}

model ChannelMessage {
  id        String   @id @default(uuid())
  content   String   @db.Text
  timestamp DateTime @default(now())

  sender   Member @relation(fields: [senderId], references: [id])
  senderId String

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  @@index([senderId, channelId])
  @@map("channel_messages")
}

model Conversation {
  id String @id @default(uuid())

  conversationInitiator   User   @relation("ConversationInitiator", fields: [conversationInitiatorId], references: [id])
  conversationInitiatorId String

  conversationReceiver   User   @relation("ConversationReceiver", fields: [conversationReceiverId], references: [id])
  conversationReceiverId String

  messages DirectMessage[]

  @@index([conversationInitiatorId, conversationReceiverId])
  @@map("conversations")
}

model DirectMessage {
  id        String   @id @default(uuid())
  content   String   @db.Text
  timestamp DateTime @default(now())

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  @@index([conversationId])
  @@map("direct_messsages")
}
